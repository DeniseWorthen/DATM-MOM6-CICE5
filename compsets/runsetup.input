# Setups for various run types
########################################################################
# coldstart
#########################################################################

embed bash runprep(RUNDIR,modules,CNTL) [[[
        rm -rf "$RUNDIR"
        mkdir -p "$RUNDIR" "$CNTL"
        cd @[RUNDIR]

        set +e

        source @[plat%SRCnems]/conf/module-setup.sh.inc
        module purge
        module use $( dirname $modules )
        module load $( basename $modules )

        mkdir RESTART INPUT 
        #For MOM6
        mkdir MOM6_RESTART MOM6_OUTPUT
        #For CICE
        mkdir history
        mkdir restart
        #For DATM
        mkdir DATM_INPUT

        export MPI_TYPE_DEPTH=20
        export OMP_STACKSIZE=512M
        export ESMF_RUNTIME_COMPLIANCECHECK=OFF:depth=4
        export ESMF_RUNTIME_PROFILE=ON
        export ESMF_RUNTIME_PROFILE_OUTPUT=SUMMARY

	# Set the stack limit as high as we can.
        if [[ $( ulimit -s ) != unlimited ]] ; then
	    for try_limit in 20000 18000 12000 9000 6000 3000 1500 1000 800 ; do
	        if [[ ! ( $( ulimit -s ) -gt $(( try_limit * 1000 )) ) ]] ; then
		    ulimit -s $(( try_limit * 1000 ))
	    else
		    break
	        fi
	    done
        fi

	ulimit -a
]]]

########################################################################
# a new embeded bash script to create input files at prerun from 
# specifications in compset
#########################################################################
embed bash edit_inputs(CDATE,DT_CICE,NPROC_ICE,RUNTYPE,USE_RESTART_TIME,FRAZIL_FWSALT,DUMPFREQ_N,DUMPFREQ,DT_THERM,DT_DYNAM) [[[


python <<EOT
import os
import datetime

fmt='%Y%m%d%H'
dt = datetime.datetime.strptime("@[CDATE]", fmt)
tt = dt.timetuple()

# ice_calendar subroutine does not allow for writing restarts 
# at hour frequencies
# if DUMPFREQ is set as "h", then convert DUMPFREQ_N to seconds and
# reset DUMPFREQ to "s"
if("@[DUMPFREQ]" == "h"):
 dumpn = int("@[DUMPFREQ_N]")
 DUMPFREQ_N = str(dumpn*3600)
 DUMPFREQ = "s"
else:
 DUMPFREQ_N = str("@[DUMPFREQ_N]")
 DUMPFREQ = str("@[DUMPFREQ]")
#

jday=tt.tm_yday
year=tt.tm_year
month=tt.tm_mon
day=tt.tm_mday
hour=tt.tm_hour
ymd=str(year)+str(month).zfill(2)+str(day).zfill(2)

#ice_in
istep0=((jday-1)*86400 + hour*3600)/int("@[DT_CICE]")

with open("ice_in_template",'rt') as inf:
 with open("ice_in",'wf') as outf:
   for x in inf.readlines():
    newline=x.replace('YEAR_INIT',str(year)) \
             .replace('ISTEP0',str(istep0)) \
             .replace('DT_CICE',"@[DT_CICE]") \
             .replace('NPROC_ICE',"@[NPROC_ICE]")\
             .replace('RUNTYPE',"@[RUNTYPE]") \
             .replace('USE_RESTART_TIME',"@[USE_RESTART_TIME]") \
             .replace('DUMPFREQ_N',DUMPFREQ_N) \
             .replace('DUMPFREQ',DUMPFREQ) \
             .replace('FRAZIL_FWSALT',"@[FRAZIL_FWSALT]")
    outf.write(newline)


#MOM_input
with open("INPUT/MOM_input_template",'rt') as inf:
 with open("INPUT/MOM_input",'wf') as outf:
   for x in inf.readlines():
    newline=x.replace('DT_THERM_MOM6',"@[DT_THERM]") \
             .replace('DT_DYNAM_MOM6',"@[DT_DYNAM]") 
    outf.write(newline)

#diag_table
with open("diag_table_template",'rt') as inf:
 with open("diag_table",'wf') as outf:
   for x in inf.readlines():
    newline=x.replace('YMD',ymd) \
             .replace('SYEAR',str(year).zfill(4)) \
             .replace('SMONTH',str(month).zfill(2)) \
             .replace('SDAY',str(day).zfill(2))
    outf.write(newline)
EOT
]]]

